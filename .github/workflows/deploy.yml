name: Deploy to Server

on:
  push:
    branches:
      - main        # Production deployment
      - develop     # Staging deployment
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT }}
          script: |
            cd /opt/vatger-training
            
            # Pull latest changes
            git pull origin develop
            
            # Update image tag in environment
            echo "IMAGE_TAG=${{ needs.build.outputs.image-tag }}" > .env.staging.local
            
            # Deploy with new image
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            
            # Run migrations and cache optimization
            docker-compose -f docker-compose.staging.yml exec -T app php artisan migrate --force
            docker-compose -f docker-compose.staging.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.staging.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.staging.yml exec -T app php artisan view:cache
            
            # Clean up old images
            docker image prune -f

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            cd /opt/vatger-training
            
            # Pull latest changes
            git pull origin main
            
            # Update image tag in environment
            echo "IMAGE_TAG=${{ needs.build.outputs.image-tag }}" > .env.production.local
            
            # Deploy with new image
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d --remove-orphans
            
            # Run migrations and cache optimization
            docker-compose -f docker-compose.production.yml exec -T app php artisan migrate --force
            docker-compose -f docker-compose.production.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.production.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.production.yml exec -T app php artisan view:cache
            
            # Clean up old images
            docker image prune -f

  notify:
    if: always()
    needs: [build, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi